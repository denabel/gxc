% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grid_link_daily.R
\name{grid_link_daily}
\alias{grid_link_daily}
\title{Link Gridded Data with Copernicus Earth Observation Daily Indicators}
\usage{
grid_link_daily(
  indicator,
  data,
  time_span = 0,
  time_lag = 0,
  baseline = FALSE,
  path = "./data/raw",
  catalogue = "derived-era5-land-daily-statistics",
  statistic = "daily_mean",
  time_zone = "utc+00:00",
  method = "bilinear",
  keep_raw = FALSE,
  parallel = FALSE,
  chunk_size = 50
)
}
\arguments{
\item{indicator}{Character string specifying the indicator to download (e.g., "2m_temperature").
Allowed indicators differ by catalogue. See the \strong{Details} section for available indicators.}

\item{data}{A SpatRaster containing the gridded input data.}

\item{time_span}{Integer specifying the time span in days for averaging the climate indicator values prior to linking
with the spatial data (default is \code{0}).}

\item{time_lag}{Integer specifying the time lag in days to shift the \code{date_var} backward (default is \code{0}).}

\item{baseline}{Either \code{FALSE} (default) or a character vector of length 2 specifying the baseline
period in years. For example, \code{baseline = c("1980", "2010")} uses the years 1980 to 2010 as the baseline.
If \code{FALSE}, no baseline calculation is performed.}

\item{path}{Character string specifying the directory path where data will be downloaded and/or stored
(default is \code{"./data/raw"}).}

\item{catalogue}{Character string specifying which ERA5 catalogue to use.
Options are \code{"derived-era5-land-daily-statistics"} (default) or \code{"derived-era5-single-levels-daily-statistics"}.}

\item{statistic}{Character string specifying the type of daily statistic to download.
Options are \code{"daily_mean"} (default), \code{"daily_maximum"}, and \code{"daily_minimum"}.}

\item{time_zone}{Character string specifying the time zone to use (default is \code{"utc+00:00"}).}

\item{method}{Character string specifying the resampling method to use when aligning the downloaded data with the grid.
Options include \code{"bilinear"} (default), \code{"near"}, \code{"cubic"}, etc.}

\item{keep_raw}{Logical value indicating whether to keep the downloaded raw \code{.grib} files.
If \code{FALSE}, the files are deleted after processing (default is \code{FALSE}).}

\item{parallel}{Logical indicating whether to use parallel processing with chunking.
Default is \code{FALSE} (i.e. sequential execution).}

\item{chunk_size}{Integer specifying the number of observations per chunk when parallelizing.
Default is \code{50}.}
}
\value{
A SpatRaster containing the original grid along with appended layers for the focal climate indicator values and, if requested,
baseline values (and optionally deviations).
}
\description{
Downloads and processes Copernicus Earth observation data (ERA5) based on
gridded daily temporal parameters, and extracts the relevant daily climate
indicator values for the provided gridded dataset. The function uses the
time dimension of the input grid (a SpatRaster) along with specified time
adjustments (time_lag and time_span) to construct daily time sequences.
It then downloads the corresponding daily statistics (e.g., daily mean, maximum,
or minimum) and extracts these values for each grid cell. If a baseline period
is specified (e.g., \code{baseline = c("1980", "2010")}), baseline daily statistics
are downloaded for the specified period and appended as a separate layer.
The resampling method (e.g., \code{"bilinear"}) is used to align the downloaded data
with the input grid. Parallel processing via \code{future.apply::future_lapply}
is supported.
}
\details{
This function interacts with the Copernicus Climate Data Store (CDS) API to download ERA5 daily reanalysis data for a specified
climate indicator and time period based on daily temporal resolution. The input gridded data (a SpatRaster) is processed to determine
its spatial extent and its time dimension is used—after adjusting by the specified time_lag and time_span—to build daily time sequences.
The function downloads the corresponding daily statistics (e.g., daily mean, maximum, or minimum) and extracts these values for each
grid cell. If a baseline period is provided (e.g., \code{baseline = c("1980", "2010")}), baseline daily statistics are downloaded for the
specified period and appended as a new layer. The resampling method (e.g., \code{"bilinear"}) is applied to ensure that the downloaded data
aligns with the input grid. Parallel processing via \code{future.apply::future_lapply} is supported to improve performance.

\strong{Note:} Users must have a CDS account and have their API key configured for \code{ecmwfr}.

\strong{Parallel Processing:}
This function can use parallel processing with chunking via
\code{future.apply::future_lapply} when \code{parallel = TRUE}. If \code{parallel = FALSE},
the function runs sequentially. When \code{parallel = TRUE}, set your parallel
plan (for example, using \code{future::plan(multisession, workers = 6)})
before calling this function. If no plan is set before but \code{parallel = TRUE},
the function will run sequentially through the chunks, which will most
likely increase duration.
}
\examples{
\dontrun{
library(terra)
# Create a sample grid (SpatRaster) covering a given extent.
# For instance, create a raster with 10 km resolution over Germany's bounding box.
germany_bbox <- c(xmin = 5, xmax = 16, ymin = 47, ymax = 55) # approximate extent
sample_grid <- rast(xmin = germany_bbox["xmin"], xmax = germany_bbox["xmax"],
                    ymin = germany_bbox["ymin"], ymax = germany_bbox["ymax"],
                    resolution = 10000, crs = "EPSG:4326")
terra::time(sample_grid) <- as.Date("2014-08-01")

# Example: Download daily focal values for "2m_temperature" and optionally baseline
result <- grid_link_daily(
  indicator = "2m_temperature",
  data = sample_grid,
  time_span = 0,
  time_lag = 0,
  baseline = c("1980", "2010"),
  path = "./data/raw",
  catalogue = "derived-era5-land-daily-statistics",
  statistic = "daily_mean",
  time_zone = "utc+00:00",
  method = "bilinear",
  keep_raw = FALSE,
  parallel = FALSE,
  chunk_size = 50
)
plot(result)
}

}
